#!/usr/bin/env bash
#/ Usage: bin/build [options]
#/ Description: Builds the project for production
#/ Options:
#/   -o, --output DIR   Output directory
#/   -v, --verbose      Verbose output

source bin/helpers/_utils.sh
set_source_and_root_dir

output=""

while (( "$#" )); do
    case "$1" in
        -o|--output)
            output="$2"
            shift 2
            ;;
        -v|--verbose)
            export VERBOSE=1
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            shift
            ;;
    esac
done

print_color blue "Building project..."

# Node.js
if [ -f "package.json" ] && grep -q '"build"' package.json; then
    cmd="npm run build"
    if [ -n "$output" ]; then
        export BUILD_OUTPUT="$output"
    fi
    run_command "$cmd" "Building Node.js project"
fi

# TypeScript
if [ -f "tsconfig.json" ] && ! grep -q '"build"' package.json 2>/dev/null; then
    cmd="npx tsc"
    if [ -n "$output" ]; then
        cmd="$cmd --outDir $output"
    fi
    run_command "$cmd" "Building TypeScript project"
fi

# Python
if [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
    if [ -f "pyproject.toml" ] && command_exists poetry; then
        run_command "poetry build" "Building Python package with Poetry"
    else
        run_command "python3 -m build" "Building Python package"
    fi
fi

# Ruby
if [ -f "Gemfile" ] && [ -f "Rakefile" ]; then
    if grep -q "build" Rakefile; then
        run_command "bundle exec rake build" "Building Ruby project"
    fi
fi

# .NET
if compgen -G "*.sln" > /dev/null || compgen -G "*.csproj" > /dev/null; then
    cmd="dotnet build --configuration Release"
    if [ -n "$output" ]; then
        cmd="$cmd --output $output"
    fi
    run_command "$cmd" "Building .NET project"
fi

# Go
if [ -f "go.mod" ]; then
    output_file="${output:-./bin/app}"
    mkdir -p "$(dirname "$output_file")"
    run_command "go build -o $output_file" "Building Go project"
fi

# Rust
if [ -f "Cargo.toml" ]; then
    cmd="cargo build --release"
    if [ -n "$output" ]; then
        export CARGO_TARGET_DIR="$output"
    fi
    run_command "$cmd" "Building Rust project"
fi

# Java/Maven
if [ -f "pom.xml" ]; then
    run_command "mvn clean package" "Building Maven project"
fi

# Java/Gradle
if [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
    run_command "./gradlew build" "Building Gradle project"
fi

# Docker
if [ -f "Dockerfile" ]; then
    image_name="${PROJECT_NAME:-app}"
    run_command "docker build -t $image_name ." "Building Docker image"
fi

print_color green "âœ“ Build complete"